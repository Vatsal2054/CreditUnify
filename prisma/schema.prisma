generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  BANK
}

enum BankName {
  SBI
  HDFC
  ICICI
  AXIS
  KOTAK
  PNB
  BOB
  CANARA
  IDBI
  UCO
  BOI
  IOB
  CBI
  SIB
  FEDERAL
  KVB
  LVB
  DBS
  CITI
  HSBC
  SC
  RBL
  YES
  INDUSIND
  BANDHAN
  AU
  IDFC
  EQUITAS
  ESAF
  UJJIVAN
  SMALLFIN
  PAYTM
  FINCARE
  JANA
  NORTHEAST
  GRAMEEN
  UTKARSH
  SURYODAY
  JALGAON
  AKOLA
  KASHI
  SAMARTH
  KAIJS
  KALUPUR
  OTHER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role           UserRole @default(USER)
  aadhaarNumber String?
  PAN           String?
  bankName      BankName?
  creditScores  CreditScore[]
  accounts      Account[]
  creditScoresBank  CreditScoreBank[]
  isTwoFactorEnable Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}


model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model TwoFactorToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model TwoFactorConfirmation{
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)

  @@unique([userId])
}

model CreditScore {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  score     Float
  recordedAt DateTime @default(now()) @map("recorded_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("credit_score_history")
}

model CreditScoreBank {
    id        String   @id @default(cuid())
    userId    String   @map("user_id")
    aadharNumber String
    PAN String
    score Float
    recordedAt DateTime @default(now()) @map("recorded_at")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@map("bank_checked_score_history")
}

model Tokens {
  id      String     @id @default(cuid())
  email   String
  token   String     @unique
  expires DateTime
  type    TokenTypes

  @@unique([email, token, type])
  @@index([email, type])
}

enum TokenTypes {
  EmailVerification
  PasswordReset
  TwoFactor
}